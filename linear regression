{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOx3YZC40utr0myHPC9t5Qx",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SidhKartikDash/NUMPY_Project/blob/main/linear%20regression\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)\n",
        "\n",
        "# Number of customers\n",
        "n_customers = 500\n",
        "\n",
        "# Generate data\n",
        "ages = np.random.randint(18, 70, n_customers)\n",
        "genders = np.random.randint(0, 2, n_customers)  # 0: Female, 1: Male\n",
        "income = np.random.normal(50, 15, n_customers)\n",
        "purchase_freq = np.random.poisson(3, n_customers)\n",
        "\n",
        "# Simulate churn: likely to churn if income < 40 and purchase_freq < 3\n",
        "churn = ((income < 40) & (purchase_freq < 3)).astype(int)\n",
        "\n",
        "# Create DataFrame\n",
        "df_customers = pd.DataFrame({\n",
        "    'Age': ages,\n",
        "    'Gender': genders,\n",
        "    'Income': income,\n",
        "    'PurchaseFrequency': purchase_freq,\n",
        "    'Churn': churn\n",
        "})\n",
        "\n",
        "# Save to CSV\n",
        "df_customers.to_csv(\"customers.csv\", index=False)\n",
        "\n",
        "# Output sample\n",
        "print(\"Customer data created and saved to 'customers.csv'\")\n",
        "print(df_customers.head())\n",
        "\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Iq9VPN6OJxX3",
        "outputId": "799a6b4f-6b61-42bd-8560-00987d614f35"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Customer data created and saved to 'customers.csv'\n",
            "   Age  Gender     Income  PurchaseFrequency  Churn\n",
            "0   56       1  24.449263                  2      1\n",
            "1   69       0  49.166785                  2      0\n",
            "2   46       0  55.760982                  4      0\n",
            "3   32       1  49.509579                  4      0\n",
            "4   60       0  18.988368                  1      1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
        "import pandas as pd\n",
        "\n",
        "# Load dataset\n",
        "df = pd.read_csv(\"customers.csv\")\n",
        "\n",
        "# Show top rows\n",
        "df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "5ZINkRXjM3WG",
        "outputId": "cc51a93e-2485-4d94-8929-22cef03a144e"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Age  Gender     Income  PurchaseFrequency  Churn\n",
              "0   56       1  24.449263                  2      1\n",
              "1   69       0  49.166785                  2      0\n",
              "2   46       0  55.760982                  4      0\n",
              "3   32       1  49.509579                  4      0\n",
              "4   60       0  18.988368                  1      1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-67efebba-ff9a-4826-86be-a18de56e2db5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Income</th>\n",
              "      <th>PurchaseFrequency</th>\n",
              "      <th>Churn</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>56</td>\n",
              "      <td>1</td>\n",
              "      <td>24.449263</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>69</td>\n",
              "      <td>0</td>\n",
              "      <td>49.166785</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>46</td>\n",
              "      <td>0</td>\n",
              "      <td>55.760982</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "      <td>49.509579</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>60</td>\n",
              "      <td>0</td>\n",
              "      <td>18.988368</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-67efebba-ff9a-4826-86be-a18de56e2db5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-67efebba-ff9a-4826-86be-a18de56e2db5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-67efebba-ff9a-4826-86be-a18de56e2db5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e86735f6-022d-4aa9-aa84-3490e7f72bdc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e86735f6-022d-4aa9-aa84-3490e7f72bdc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e86735f6-022d-4aa9-aa84-3490e7f72bdc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 18,\n        \"max\": 69,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          50,\n          51,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.828891591399794,\n        \"min\": 9.546700355876425,\n        \"max\": 96.18321212682856,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          50.446342092436176,\n          49.24642835826295\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PurchaseFrequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "HfNQ56NiNrd4",
        "outputId": "3f7aebdd-81be-4afb-db22-01e26f1807ed"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 500 entries, 0 to 499\n",
            "Data columns (total 5 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   Age                500 non-null    int64  \n",
            " 1   Gender             500 non-null    int64  \n",
            " 2   Income             500 non-null    float64\n",
            " 3   PurchaseFrequency  500 non-null    int64  \n",
            " 4   Churn              500 non-null    int64  \n",
            "dtypes: float64(1), int64(4)\n",
            "memory usage: 19.7 KB\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Age                  0\n",
              "Gender               0\n",
              "Income               0\n",
              "PurchaseFrequency    0\n",
              "Churn                0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Income</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PurchaseFrequency</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Churn</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='Churn', data=df)\n",
        "plt.title(\"custmor Churn Distribution\")\n",
        "plt.show()\n",
        "sns.heatmap(df.corr(), annot=True)\n",
        "plt.title(\"Correlation Heatmap\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "G20EOZsJOZ3i",
        "outputId": "546f2513-cf16-467f-e7b9-f3ee4e176b2a"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Prepare data\n",
        "X = df.drop(\"Churn\", axis=1)\n",
        "y = df[\"Churn\"]\n",
        "\n",
        "# Split into training and testing sets\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "# Train model\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "model = LogisticRegression()\n",
        "model.fit(X_train, y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "ZruqtLP5QVNM",
        "outputId": "35cecc3b-d2eb-4ab2-92e1-1eac31dca738"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predict\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Accuracy\n",
        "print(\"Accuracy Score:\", accuracy_score(y_test, y_pred))\n",
        "\n",
        "# Confusion matrix\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion Matrix:\\n\", cm)\n",
        "\n",
        "# Classification report\n",
        "print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n",
        "\n",
        "# Visualize confusion matrix\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap=\"Blues\")\n",
        "plt.title(\"Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 715
        },
        "id": "-QyH-330ZufE",
        "outputId": "df43bad1-8f3c-46ef-b2a4-818528a6b43b"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy Score: 0.91\n",
            "Confusion Matrix:\n",
            " [[85  2]\n",
            " [ 7  6]]\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.98      0.95        87\n",
            "           1       0.75      0.46      0.57        13\n",
            "\n",
            "    accuracy                           0.91       100\n",
            "   macro avg       0.84      0.72      0.76       100\n",
            "weighted avg       0.90      0.91      0.90       100\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create new customer data\n",
        "new_customer = pd.DataFrame({\n",
        "    'Age': [28],\n",
        "    'Gender': [1],\n",
        "    'Income': [37],\n",
        "    'PurchaseFrequency': [2]\n",
        "})\n",
        "\n",
        "# Predict churn\n",
        "prediction = model.predict(new_customer)[0]\n",
        "\n",
        "# Display prediction result with label\n",
        "if prediction == 1:\n",
        "    print(\"This customer is likely to CHURN. Consider offering retention benefits.\")\n",
        "else:\n",
        "    print(\"This customer is likely to STAY. Continue engagement as usual.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uZ5eIgZvXMND",
        "outputId": "4110ff8b-5e4b-4552-bf59-fab766da9612"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This customer is likely to STAY. Continue engagement as usual.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " # Logistic Regression Mathematics Explained\n",
        "\n",
        "# Logistic Regression predicts probability of churn using this formula:\n",
        "# P(y=1) = 1 / (1 + e^-(b0 + b1*x1 + b2*x2 + ... + bn*xn))\n",
        "\n",
        "\n",
        "\n",
        "# Let's take one customer example:\n",
        "# Features: Age, Monthly Balance, Number of Transactions\n",
        "age = 45             # x1\n",
        "balance = 25000      # x2\n",
        "transactions = 6     # x3\n",
        "\n",
        "# Example coefficients learned by the model (for explanation)\n",
        "b0 = -4              # Intercept\n",
        "b1 = 0.05            # Coefficient for age\n",
        "b2 = 0.0001          # Coefficient for balance\n",
        "b3 = 0.3             # Coefficient for transactions\n",
        "\n",
        "# Step 1: Calculate linear score (z)\n",
        "z = b0 + (b1 * age) + (b2 * balance) + (b3 * transactions)\n",
        "print(\"Linear score (z):\", round(z, 4))\n",
        "\n",
        "# Step 2: Apply sigmoid function to convert z to probability\n",
        "probability = 1 / (1 + np.exp(-z))\n",
        "print(\"Predicted probability of churn:\", round(probability, 4))\n",
        "\n",
        "# Step 3: Predict churn based on threshold 0.5\n",
        "if probability > 0.5:\n",
        "    print(\" This customer is likely to CHURN.\")\n",
        "else:\n",
        "    print(\" This customer is likely to STAY.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5OdgA6PVZ8IP",
        "outputId": "c1a2ea75-a5a1-4421-91c9-74099b492551"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Linear score (z): 2.55\n",
            "Predicted probability of churn: 0.9276\n",
            " This customer is likely to CHURN.\n"
          ]
        }
      ]
    }
  ]
}